/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexer;

import java.io.*;
import node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private IPushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") final PushbackReader in)
    {
        this.in = new IPushbackReader() {

            private PushbackReader pushbackReader = in;
            
            @Override
            public void unread(int c) throws IOException {
                pushbackReader.unread(c);
            }
            
            @Override
            public int read() throws IOException {
                return pushbackReader.read();
            }
        };
    }
 
    public Lexer(@SuppressWarnings("hiding") IPushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            new InvalidToken(this.text.substring(0, 1), start_line + 1, start_pos + 1),
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLBrace(line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRBrace(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLParen(line, pos); }
    Token new3(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRParen(line, pos); }
    Token new4(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TKeyword(text, line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTraditionalComment(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDocumentationComment(text, line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEndOfLineComment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {40, 40, 6}, {41, 41, 7}, {47, 47, 8}, {65, 90, 9}, {95, 95, 10}, {97, 97, 11}, {98, 98, 12}, {99, 99, 13}, {100, 100, 14}, {101, 101, 15}, {102, 102, 16}, {103, 104, 17}, {105, 105, 18}, {106, 107, 17}, {108, 108, 19}, {109, 109, 20}, {110, 110, 21}, {111, 111, 22}, {112, 112, 23}, {113, 113, 17}, {114, 114, 24}, {115, 115, 25}, {116, 116, 26}, {117, 117, 27}, {118, 118, 28}, {119, 119, 29}, {120, 122, 17}, {123, 123, 30}, {125, 125, 31}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 32}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {},
            {},
            {{42, 42, 33}, {47, 47, 34}, },
            {{48, 57, 35}, {65, 90, 36}, {95, 95, 37}, {97, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 95, -11}, {97, 97, 38}, {98, 98, 39}, {99, 109, 38}, {110, 110, 40}, {111, 115, 38}, {116, 116, 41}, {117, 122, 38}, },
            {{48, 95, -11}, {97, 110, 38}, {111, 111, 42}, {112, 122, 38}, },
            {{48, 95, -11}, {97, 97, 43}, {98, 103, 38}, {104, 104, 44}, {105, 110, 38}, {111, 111, 45}, {112, 116, 38}, {117, 117, 46}, {118, 122, 38}, },
            {{48, 95, -11}, {97, 100, 38}, {101, 101, 47}, {102, 110, 38}, {111, 111, 48}, {112, 122, 38}, },
            {{48, 95, -11}, {97, 109, 38}, {110, 110, 49}, {111, 119, 38}, {120, 120, 50}, {121, 122, 38}, },
            {{48, 95, -11}, {97, 97, 51}, {98, 104, 38}, {105, 105, 52}, {106, 107, 38}, {108, 108, 53}, {109, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 109, -17}, {110, 110, 54}, {111, 122, 38}, },
            {{48, 110, -14}, {111, 111, 55}, {112, 122, 38}, },
            {{48, 110, -14}, {111, 111, 56}, {112, 122, 38}, },
            {{48, 95, -11}, {97, 97, 57}, {98, 122, 38}, },
            {{48, 97, -13}, {98, 98, 58}, {99, 99, 59}, {100, 109, 38}, {110, 110, 60}, {111, 116, 38}, {117, 117, 61}, {118, 122, 38}, },
            {{48, 95, -11}, {97, 113, 38}, {114, 114, 62}, {115, 116, 38}, {117, 117, 63}, {118, 122, 38}, },
            {{48, 95, -11}, {97, 97, 64}, {98, 100, 38}, {101, 101, 65}, {102, 122, 38}, },
            {{48, 100, -16}, {101, 101, 66}, {102, 103, 38}, {104, 104, 67}, {105, 115, 38}, {116, 116, 68}, {117, 117, 69}, {118, 118, 38}, {119, 119, 70}, {120, 122, 38}, },
            {{48, 113, -25}, {114, 114, 71}, {115, 120, 38}, {121, 121, 72}, {122, 122, 38}, },
            {{48, 109, -17}, {110, 110, 73}, {111, 122, 38}, },
            {{48, 95, -11}, {97, 97, 74}, {98, 110, 38}, {111, 111, 75}, {112, 122, 38}, },
            {{48, 95, -11}, {97, 98, 38}, {99, 99, 76}, {100, 114, 38}, {115, 115, 77}, {116, 122, 38}, },
            {},
            {},
            {{9, 32, -2}, },
            {{0, 9, 78}, {10, 10, 79}, {11, 12, 78}, {13, 13, 80}, {14, 41, 78}, {42, 42, 81}, {43, 255, 78}, },
            {{0, 9, 82}, {10, 10, 83}, {11, 12, 82}, {13, 13, 84}, {14, 255, 82}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 95, -11}, {97, 114, 38}, {115, 115, 85}, {116, 122, 38}, },
            {{48, 95, -11}, {97, 120, 38}, {121, 121, 86}, {122, 122, 38}, },
            {{48, 95, -11}, {97, 115, 38}, {116, 116, 87}, {117, 122, 38}, },
            {{48, 110, -14}, {111, 111, 88}, {112, 122, 38}, },
            {{48, 114, -41}, {115, 115, 89}, {116, 122, 38}, },
            {{48, 95, -11}, {97, 97, 90}, {98, 122, 38}, },
            {{48, 109, -17}, {110, 110, 91}, {111, 122, 38}, },
            {{48, 114, -41}, {115, 115, 92}, {116, 122, 38}, },
            {{48, 95, -11}, {97, 101, 38}, {102, 102, 93}, {103, 122, 38}, },
            {{48, 95, -11}, {97, 116, 38}, {117, 117, 94}, {118, 122, 38}, },
            {{48, 116, -50}, {117, 117, 95}, {118, 122, 38}, },
            {{48, 98, -31}, {99, 99, 96}, {100, 122, 38}, },
            {{48, 98, -31}, {99, 99, 97}, {100, 107, 38}, {108, 108, 98}, {109, 122, 38}, },
            {{48, 95, -11}, {97, 119, 38}, {120, 120, 99}, {121, 122, 38}, },
            {{48, 110, -14}, {111, 111, 100}, {112, 122, 38}, },
            {{48, 110, -14}, {111, 111, 101}, {112, 115, 38}, {116, 116, 102}, {117, 122, 38}, },
            {{48, 109, -17}, {110, 110, 103}, {111, 122, 38}, },
            {{48, 95, -11}, {97, 99, 38}, {100, 100, 104}, {101, 122, 38}, },
            {{48, 115, -43}, {116, 116, 105}, {117, 122, 38}, },
            {{48, 95, -11}, {97, 105, 38}, {106, 106, 106}, {107, 122, 38}, },
            {{48, 115, -43}, {116, 116, 107}, {117, 122, 38}, },
            {{48, 100, -16}, {101, 101, 108}, {102, 122, 38}, },
            {{48, 115, -43}, {116, 116, 109}, {117, 122, 38}, },
            {{48, 95, -11}, {97, 104, 38}, {105, 105, 110}, {106, 122, 38}, },
            {{48, 97, -13}, {98, 98, 111}, {99, 122, 38}, },
            {{48, 104, -64}, {105, 105, 112}, {106, 122, 38}, },
            {{48, 95, -11}, {97, 97, 113}, {98, 122, 38}, },
            {{48, 95, -11}, {97, 112, 38}, {113, 113, 114}, {114, 122, 38}, },
            {{48, 110, -14}, {111, 111, 115}, {112, 122, 38}, },
            {{48, 113, -25}, {114, 114, 116}, {115, 122, 38}, },
            {{48, 95, -11}, {97, 111, 38}, {112, 112, 117}, {113, 122, 38}, },
            {{48, 104, -64}, {105, 105, 118}, {106, 122, 38}, },
            {{48, 116, -50}, {117, 117, 119}, {118, 122, 38}, },
            {{48, 111, -71}, {112, 112, 120}, {113, 122, 38}, },
            {{48, 104, -64}, {105, 105, 121}, {106, 114, 38}, {115, 115, 122}, {116, 122, 38}, },
            {{48, 95, -11}, {97, 107, 38}, {108, 108, 123}, {109, 122, 38}, },
            {{48, 104, -64}, {105, 105, 124}, {106, 122, 38}, },
            {{48, 95, -11}, {97, 103, 38}, {104, 104, 125}, {105, 122, 38}, },
            {{48, 115, -43}, {116, 116, 126}, {117, 122, 38}, },
            {{0, 41, -35}, {42, 42, 127}, {43, 255, 78}, },
            {{0, 255, -80}, },
            {{0, 9, 78}, {10, 10, 128}, {11, 255, -80}, },
            {{0, 9, 129}, {10, 10, 130}, {11, 12, 129}, {13, 13, 131}, {14, 41, 129}, {42, 42, 132}, {43, 46, 129}, {47, 47, 133}, {48, 255, 129}, },
            {{0, 255, -36}, },
            {},
            {{10, 10, 134}, },
            {{48, 115, -43}, {116, 116, 135}, {117, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 113, -25}, {114, 114, 136}, {115, 122, 38}, },
            {{48, 107, -76}, {108, 108, 137}, {109, 122, 38}, },
            {{48, 100, -16}, {101, 101, 138}, {102, 122, 38}, },
            {{48, 113, -25}, {114, 114, 139}, {115, 122, 38}, },
            {{48, 114, -41}, {115, 115, 140}, {116, 116, 141}, {117, 122, 38}, },
            {{48, 115, -43}, {116, 116, 142}, {117, 122, 38}, },
            {{48, 95, -11}, {97, 97, 143}, {98, 122, 38}, },
            {{48, 97, -13}, {98, 98, 144}, {99, 122, 38}, },
            {{48, 95, -11}, {97, 108, 38}, {109, 109, 145}, {110, 122, 38}, },
            {{48, 100, -16}, {101, 101, 146}, {102, 122, 38}, },
            {{48, 115, -43}, {116, 116, 147}, {117, 122, 38}, },
            {{48, 114, -41}, {115, 115, 148}, {116, 122, 38}, },
            {{48, 100, -16}, {101, 101, 149}, {102, 122, 38}, },
            {{48, 95, -11}, {97, 97, 150}, {98, 122, 38}, },
            {{48, 116, -50}, {117, 117, 151}, {118, 122, 38}, },
            {{48, 100, -16}, {101, 101, 152}, {102, 122, 38}, },
            {{48, 95, -11}, {97, 102, 38}, {103, 103, 153}, {104, 122, 38}, },
            {{48, 116, -50}, {117, 117, 154}, {118, 122, 38}, },
            {{48, 104, -64}, {105, 105, 155}, {106, 122, 38}, },
            {{48, 100, -16}, {101, 101, 156}, {102, 122, 38}, },
            {{48, 100, -16}, {101, 101, 157}, {102, 122, 38}, },
            {{48, 95, -11}, {97, 118, 38}, {119, 119, 158}, {120, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 95, -11}, {97, 117, 38}, {118, 118, 159}, {119, 122, 38}, },
            {{48, 107, -76}, {108, 108, 160}, {109, 122, 38}, },
            {{48, 114, -41}, {115, 115, 161}, {116, 122, 38}, },
            {{48, 99, -58}, {100, 100, 162}, {101, 122, 38}, },
            {{48, 116, -50}, {117, 117, 163}, {118, 122, 38}, },
            {{48, 113, -25}, {114, 114, 164}, {115, 122, 38}, },
            {{48, 104, -64}, {105, 105, 165}, {106, 116, 38}, {117, 117, 166}, {118, 122, 38}, },
            {{48, 111, -71}, {112, 112, 167}, {113, 122, 38}, },
            {{48, 115, -43}, {116, 116, 168}, {117, 122, 38}, },
            {{48, 100, -16}, {101, 101, 169}, {102, 109, 38}, {110, 110, 170}, {111, 122, 38}, },
            {{48, 100, -16}, {101, 101, 171}, {102, 122, 38}, },
            {{48, 110, -14}, {111, 111, 172}, {112, 122, 38}, },
            {{48, 104, -64}, {105, 105, 173}, {106, 122, 38}, },
            {{48, 116, -50}, {117, 117, 174}, {118, 122, 38}, },
            {{48, 99, -58}, {100, 100, 175}, {101, 122, 38}, },
            {{48, 95, -11}, {97, 97, 176}, {98, 122, 38}, },
            {{48, 113, -25}, {114, 114, 177}, {115, 122, 38}, },
            {{0, 9, 178}, {10, 10, 179}, {11, 12, 178}, {13, 13, 180}, {14, 41, 178}, {42, 42, 127}, {43, 46, 178}, {47, 47, 181}, {48, 255, 178}, },
            {{0, 255, -80}, },
            {{0, 9, 182}, {10, 10, 183}, {11, 12, 182}, {13, 13, 184}, {14, 41, 182}, {42, 42, 185}, {43, 255, 182}, },
            {{0, 255, -131}, },
            {{0, 9, 182}, {10, 10, 186}, {11, 255, -131}, },
            {{0, 255, -83}, },
            {},
            {},
            {{48, 113, -25}, {114, 114, 187}, {115, 122, 38}, },
            {{48, 104, -64}, {105, 105, 188}, {106, 122, 38}, },
            {{48, 100, -16}, {101, 101, 189}, {102, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 115, -43}, {116, 116, 190}, {117, 122, 38}, },
            {{48, 100, -16}, {101, 101, 191}, {102, 122, 38}, },
            {{48, 110, -14}, {111, 111, 192}, {112, 122, 38}, },
            {{48, 116, -50}, {117, 117, 193}, {118, 122, 38}, },
            {{48, 107, -76}, {108, 108, 194}, {109, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 111, -71}, {112, 112, 195}, {113, 122, 38}, },
            {{48, 110, -14}, {111, 111, 196}, {112, 122, 38}, },
            {{48, 100, -16}, {101, 101, 197}, {102, 122, 38}, },
            {{48, 99, -58}, {100, 100, 198}, {101, 122, 38}, },
            {{48, 115, -43}, {116, 116, 199}, {117, 122, 38}, },
            {{48, 115, -43}, {116, 116, 200}, {117, 122, 38}, },
            {{48, 113, -25}, {114, 114, 201}, {115, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 107, -76}, {108, 108, 202}, {109, 122, 38}, },
            {{48, 117, -112}, {118, 118, 203}, {119, 122, 38}, },
            {{48, 98, -31}, {99, 99, 204}, {100, 122, 38}, },
            {{48, 115, -43}, {116, 116, 205}, {117, 122, 38}, },
            {{48, 95, -11}, {97, 97, 206}, {98, 122, 38}, },
            {{48, 95, -11}, {97, 97, 207}, {98, 122, 38}, },
            {{48, 104, -64}, {105, 105, 208}, {106, 122, 38}, },
            {{48, 100, -16}, {101, 101, 209}, {102, 122, 38}, },
            {{48, 110, -14}, {111, 111, 210}, {112, 122, 38}, },
            {{48, 100, -16}, {101, 101, 211}, {102, 122, 38}, },
            {{48, 115, -43}, {116, 116, 212}, {117, 122, 38}, },
            {{48, 109, -17}, {110, 110, 213}, {111, 122, 38}, },
            {{48, 98, -31}, {99, 99, 214}, {100, 122, 38}, },
            {{48, 110, -14}, {111, 111, 215}, {112, 122, 38}, },
            {{48, 98, -31}, {99, 99, 216}, {100, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 98, -31}, {99, 99, 217}, {100, 122, 38}, },
            {{48, 99, -58}, {100, 100, 218}, {101, 122, 38}, },
            {{48, 109, -17}, {110, 110, 219}, {111, 122, 38}, },
            {{48, 102, -105}, {103, 103, 220}, {104, 122, 38}, },
            {{48, 100, -16}, {101, 101, 221}, {102, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 113, -25}, {114, 114, 222}, {115, 122, 38}, },
            {{48, 104, -64}, {105, 105, 223}, {106, 122, 38}, },
            {{0, 9, 224}, {10, 10, 225}, {11, 12, 224}, {13, 13, 226}, {14, 41, 224}, {42, 42, 227}, {43, 255, 224}, },
            {{0, 255, -180}, },
            {{0, 9, 224}, {10, 10, 228}, {11, 255, -180}, },
            {},
            {{0, 255, -131}, },
            {{0, 255, -131}, },
            {{0, 9, 182}, {10, 10, 229}, {11, 255, -131}, },
            {{0, 41, -83}, {42, 42, 185}, {43, 255, -83}, },
            {{0, 255, -131}, },
            {{48, 95, -11}, {97, 97, 230}, {98, 122, 38}, },
            {{48, 97, -13}, {98, 98, 231}, {99, 122, 38}, },
            {{48, 95, -11}, {97, 97, 232}, {98, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 119, -54}, {120, 120, 233}, {121, 122, 38}, },
            {{48, 108, -97}, {109, 109, 234}, {110, 122, 38}, },
            {{48, 107, -76}, {108, 108, 235}, {109, 122, 38}, },
            {{48, 100, -16}, {101, 101, 236}, {102, 122, 38}, },
            {{48, 115, -43}, {116, 116, 237}, {117, 122, 38}, },
            {{48, 113, -25}, {114, 114, 238}, {115, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 101, -49}, {102, 102, 239}, {103, 122, 38}, },
            {{48, 100, -16}, {101, 101, 240}, {102, 122, 38}, },
            {{48, 100, -16}, {101, 101, 241}, {102, 122, 38}, },
            {{48, 115, -43}, {116, 116, 242}, {117, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 120, -42}, {121, 121, 243}, {122, 122, 38}, },
            {{48, 115, -43}, {116, 116, 244}, {117, 122, 38}, },
            {{48, 98, -31}, {99, 99, 245}, {100, 122, 38}, },
            {{48, 114, -41}, {115, 115, 246}, {116, 122, 38}, },
            {{48, 109, -17}, {110, 110, 247}, {111, 122, 38}, },
            {{48, 109, -17}, {110, 110, 248}, {111, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 102, -105}, {103, 103, 249}, {104, 122, 38}, },
            {{48, 115, -43}, {116, 116, 250}, {117, 122, 38}, },
            {{48, 113, -25}, {114, 114, 251}, {115, 122, 38}, },
            {{48, 103, -78}, {104, 104, 252}, {105, 122, 38}, },
            {{48, 95, -11}, {97, 97, 253}, {98, 122, 38}, },
            {{48, 100, -16}, {101, 101, 254}, {102, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 109, -17}, {110, 110, 255}, {111, 122, 38}, },
            {{48, 97, -13}, {98, 98, 256}, {99, 115, 38}, {116, 116, 257}, {117, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 109, -17}, {110, 110, 258}, {111, 122, 38}, },
            {{0, 255, -180}, },
            {{0, 255, -180}, },
            {{0, 9, 224}, {10, 10, 259}, {11, 255, -180}, },
            {{0, 41, -129}, {42, 42, 227}, {43, 255, -129}, },
            {{0, 255, -180}, },
            {{0, 255, -131}, },
            {{48, 98, -31}, {99, 99, 260}, {100, 122, 38}, },
            {{48, 116, -50}, {117, 117, 261}, {118, 122, 38}, },
            {{48, 109, -17}, {110, 110, 262}, {111, 122, 38}, },
            {{48, 115, -43}, {116, 116, 263}, {117, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 115, -43}, {116, 116, 264}, {117, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 104, -64}, {105, 105, 265}, {106, 122, 38}, },
            {{48, 120, -42}, {121, 121, 266}, {122, 122, 38}, },
            {{48, 95, -11}, {97, 97, 267}, {98, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 100, -16}, {101, 101, 268}, {102, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 107, -76}, {108, 108, 269}, {109, 122, 38}, },
            {{48, 98, -31}, {99, 99, 270}, {100, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 115, -43}, {116, 116, 271}, {117, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 115, -43}, {116, 116, 272}, {117, 122, 38}, },
            {{48, 101, -49}, {102, 102, 273}, {103, 122, 38}, },
            {{48, 100, -16}, {101, 101, 274}, {102, 122, 38}, },
            {{48, 95, -11}, {97, 97, 275}, {98, 122, 38}, },
            {{48, 120, -42}, {121, 121, 276}, {122, 122, 38}, },
            {{48, 102, -105}, {103, 103, 277}, {104, 122, 38}, },
            {{0, 255, -180}, },
            {{48, 115, -43}, {116, 116, 278}, {117, 122, 38}, },
            {{48, 115, -43}, {116, 116, 279}, {117, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 110, -14}, {111, 111, 280}, {112, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 98, -31}, {99, 99, 281}, {100, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 120, -42}, {121, 121, 282}, {122, 122, 38}, },
            {{48, 100, -16}, {101, 101, 283}, {102, 122, 38}, },
            {{48, 114, -41}, {115, 115, 284}, {116, 122, 38}, },
            {{48, 95, -11}, {97, 97, 285}, {98, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 99, -58}, {100, 100, 286}, {101, 122, 38}, },
            {{48, 114, -41}, {115, 115, 287}, {116, 122, 38}, },
            {{48, 111, -71}, {112, 112, 288}, {113, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 100, -16}, {101, 101, 289}, {102, 122, 38}, },
            {{48, 109, -17}, {110, 110, 290}, {111, 122, 38}, },
            {{48, 100, -16}, {101, 101, 291}, {102, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 97, -13}, {98, 98, 292}, {99, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 100, -16}, {101, 101, 293}, {102, 122, 38}, },
            {{48, 100, -16}, {101, 101, 294}, {102, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 107, -76}, {108, 108, 295}, {109, 122, 38}, },
            {{48, 122, -11}, },
            {{48, 122, -11}, },
            {{48, 100, -16}, {101, 101, 296}, {102, 122, 38}, },
            {{48, 122, -11}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {5, 5, 5, 5, 5, 5, 2, 3, -1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 1, 5, -1, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, 9, 9, 9, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, -1, -1, -1, -1, -1, -1, 8, 9, 6, 6, 6, 4, 4, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 4, 6, 6, -1, -1, -1, 7, -1, -1, -1, -1, -1, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 6, 4, 6, 6, 4, 6, -1, -1, -1, -1, -1, -1, 6, 6, 6, 6, 4, 6, 4, 6, 6, 6, 4, 4, 4, 4, 6, 4, 4, 6, 6, 4, 4, 6, 4, 6, 6, 6, 6, 6, 6, -1, 6, 6, 4, 4, 4, 6, 4, 6, 4, 6, 6, 6, 6, 4, 6, 6, 6, 4, 4, 6, 6, 6, 4, 4, 4, 6, 4, 6, 6, 4, 4, 4, 6, 4, 4, 6, 4, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
